[
  {
    "type": "FunctionDefinition",
    "name": "special_s",
    "start_line": 13,
    "end_line": 14,
    "offset_start": 289,
    "offset_end": 361,
    "content": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "public",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_s",
    "start_line": 18,
    "end_line": 19,
    "offset_start": 383,
    "offset_end": 499,
    "content": "protected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "protected",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_d",
    "start_line": 25,
    "end_line": 31,
    "offset_start": 638,
    "offset_end": 917,
    "content": "<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 8
  },
  {
    "type": "FunctionDefinition",
    "name": "special_synchronizedMethod",
    "start_line": 35,
    "end_line": 40,
    "offset_start": 935,
    "offset_end": 1115,
    "content": "synchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }",
    "modifiers": [
      "synchronized"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "protected",
    "node_count": 7
  },
  {
    "type": "FunctionDefinition",
    "name": "special_checkStatus",
    "start_line": 43,
    "end_line": 45,
    "offset_start": 1134,
    "offset_end": 1208,
    "content": "volatile\n    volatile boolean checkStatus() {\n        return status;\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }",
    "modifiers": [
      "volatile"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 4
  },
  {
    "type": "FunctionDefinition",
    "name": "special_privateStaticHelper",
    "start_line": 49,
    "end_line": 50,
    "offset_start": 1228,
    "offset_end": 1322,
    "content": "private static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }",
    "modifiers": [
      "static"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "private",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_defaultMethod",
    "start_line": 55,
    "end_line": 56,
    "offset_start": 1380,
    "offset_end": 1471,
    "content": "default void defaultMethod(String param) {\n            System.out.println(param);\n        }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_staticInterfaceMethod",
    "start_line": 59,
    "end_line": 60,
    "offset_start": 1489,
    "offset_end": 1595,
    "content": "static void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }",
    "modifiers": [
      "static"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_abstractMethod",
    "start_line": 66,
    "end_line": 65,
    "offset_start": 1664,
    "offset_end": 1695,
    "content": "abstract void abstractMethod();",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();",
    "modifiers": [
      "abstract"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 1
  },
  {
    "type": "FunctionDefinition",
    "name": "special_concreteMethod",
    "start_line": 68,
    "end_line": 69,
    "offset_start": 1713,
    "offset_end": 1796,
    "content": "final void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }",
    "modifiers": [
      "final"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_n",
    "start_line": 75,
    "end_line": 85,
    "offset_start": 1860,
    "offset_end": 2235,
    "content": "<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 12
  },
  {
    "type": "FunctionDefinition",
    "name": "special_nativeOperation",
    "start_line": 89,
    "end_line": 88,
    "offset_start": 2259,
    "offset_end": 2297,
    "content": "private native void nativeOperation();",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();",
    "modifiers": [
      "native"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "private",
    "node_count": 1
  },
  {
    "type": "FunctionDefinition",
    "name": "special_n",
    "start_line": 93,
    "end_line": 94,
    "offset_start": 2403,
    "offset_end": 2527,
    "content": "<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_apply",
    "start_line": 100,
    "end_line": 99,
    "offset_start": 2616,
    "offset_end": 2634,
    "content": "Z apply(X x, Y y);",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 1
  },
  {
    "type": "FunctionDefinition",
    "name": "special_lambdaMethod",
    "start_line": 104,
    "end_line": 107,
    "offset_start": 2665,
    "offset_end": 2822,
    "content": "public void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "public",
    "node_count": 5
  },
  {
    "type": "FunctionDefinition",
    "name": "special_varArgsMethod",
    "start_line": 111,
    "end_line": 114,
    "offset_start": 2842,
    "offset_end": 2973,
    "content": "public static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }",
    "modifiers": [
      "static"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "public",
    "node_count": 5
  },
  {
    "type": "FunctionDefinition",
    "name": "special_clone",
    "start_line": 119,
    "end_line": 121,
    "offset_start": 3029,
    "offset_end": 3151,
    "content": "@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "protected",
    "node_count": 4
  },
  {
    "type": "FunctionDefinition",
    "name": "special_innerGenericMethod",
    "start_line": 124,
    "end_line": 125,
    "offset_start": 3169,
    "offset_end": 3268,
    "content": "private <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "private",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_toString",
    "start_line": 140,
    "end_line": 144,
    "offset_start": 3481,
    "offset_end": 3624,
    "content": "@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }",
    "modifiers": [
      "synchronized"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "public",
    "node_count": 6
  },
  {
    "type": "FunctionDefinition",
    "name": "special_create2DArray",
    "start_line": 148,
    "end_line": 149,
    "offset_start": 3645,
    "offset_end": 3737,
    "content": "public int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "public",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_transientMethod",
    "start_line": 153,
    "end_line": 154,
    "offset_start": 3762,
    "offset_end": 3818,
    "content": "transient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }",
    "modifiers": [
      "transient"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_strictFloatingPointMethod",
    "start_line": 158,
    "end_line": 159,
    "offset_start": 3842,
    "offset_end": 3913,
    "content": "strictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }",
    "modifiers": [
      "strictfp"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_throwingMethod",
    "start_line": 163,
    "end_line": 165,
    "offset_start": 3945,
    "offset_end": 4103,
    "content": "protected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }\nprotected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }",
    "modifiers": [
      "final"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "protected",
    "node_count": 4
  },
  {
    "type": "FunctionDefinition",
    "name": "special_methodOne",
    "start_line": 170,
    "end_line": 170,
    "offset_start": 4150,
    "offset_end": 4172,
    "content": "\n    void methodOne();",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }\nprotected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }\n\n    void methodOne();",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 1
  },
  {
    "type": "FunctionDefinition",
    "name": "special_methodTwo",
    "start_line": 174,
    "end_line": 175,
    "offset_start": 4198,
    "offset_end": 4251,
    "content": "default void methodTwo() {\n        methodOne();\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }\nprotected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }\n\n    void methodOne();\ndefault void methodTwo() {\n        methodOne();\n    }",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  },
  {
    "type": "FunctionDefinition",
    "name": "special_e",
    "start_line": 175,
    "end_line": 174,
    "offset_start": 4233,
    "offset_end": 4245,
    "content": "methodOne();",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }\nprotected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }\n\n    void methodOne();\ndefault void methodTwo() {\n        methodOne();\n    }\nmethodOne();",
    "modifiers": [],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 1
  },
  {
    "type": "FunctionDefinition",
    "name": "special_methodThree",
    "start_line": 179,
    "end_line": 180,
    "offset_start": 4277,
    "offset_end": 4368,
    "content": "static void methodThree() {\n        System.out.println(\"Static method in interface\");\n    }",
    "contract_name": "test_java4237686499",
    "contract_code": "public ComplexClass() {\n        System.out.println(\"Constructor\");\n    }\nprotected ComplexClass(T initial, int... vars) throws IllegalArgumentException {\n        this.value = initial;\n    }\n<E> complexGenericMethod(\n            E[] elements,\n            Function<E, String> mapper) throws IllegalArgumentException {\n        return Arrays.stream(elements)\n                .map(mapper)\n                .map(s -> (E) s)\n                .collect(Collectors.toList());\n    }\nsynchronized protected void synchronizedMethod() {\n        try {\n            wait(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\nvolatile\n    volatile boolean checkStatus() {\n        return status;\n    }\nprivate static void privateStaticHelper() {\n        System.out.println(\"Helper method\");\n    }\ndefault void defaultMethod(String param) {\n            System.out.println(param);\n        }\nstatic void staticInterfaceMethod() {\n            System.out.println(\"Static interface method\");\n        }\nabstract void abstractMethod();\nfinal void concreteMethod() {\n            System.out.println(\"Concrete\");\n        }\n<List<T>> asyncOperation(\n            List<T> input,\n            boolean parallel) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (parallel) {\n                return input.parallelStream()\n                        .sorted()\n                        .collect(Collectors.toList());\n            }\n            return new ArrayList<>(input);\n        });\n    }\nprivate native void nativeOperation();\n<K, V> complexGenericOperation(K key, V value) throws Exception {\n        return Collections.singletonMap(key, value);\n    }\nZ apply(X x, Y y);\npublic void lambdaMethod() {\n        ComplexFunction<String, Integer, Boolean> func = (str, num) -> {\n            return str.length() > num;\n        };\n    }\npublic static <T> void varArgsMethod(T... args) {\n        for (T arg : args) {\n            System.out.println(arg);\n        }\n    }\n@Override\n        protected Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\nprivate <E> void innerGenericMethod(E element) {\n            System.out.println(element);\n        }\n@Override\n    @Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public synchronized String toString() {\n        return super.toString();\n    }\npublic int[][] create2DArray(int rows, int cols) {\n        return new int[rows][cols];\n    }\ntransient void transientMethod() {\n        // \u67d0\u4e9b\u5b9e\u73b0\n    }\nstrictfp double strictFloatingPointMethod() {\n        return 1.0;\n    }\nprotected final void throwingMethod() \n            throws IllegalArgumentException, NullPointerException {\n        throw new IllegalArgumentException();\n    }\n\n    void methodOne();\ndefault void methodTwo() {\n        methodOne();\n    }\nmethodOne();\nstatic void methodThree() {\n        System.out.println(\"Static method in interface\");\n    }",
    "modifiers": [
      "static"
    ],
    "stateMutability": null,
    "returnParameters": null,
    "visibility": "package",
    "node_count": 3
  }
]